dnl Process this file with autoconf to produce a configure script.

dnl this is to determine if the config script is running in the proper place
dnl just give it one file relative to where it should be
AC_INIT(engine/dragon.c)

AM_CONFIG_HEADER(config.h)
AC_PREREQ(2.12)dnl               dnl Minimum Autoconf version required.

dnl this defines VERSION and PACKAGE
AM_INIT_AUTOMAKE([gnugo], [2.6])
GNU_PACKAGE="GNU $PACKAGE"
AC_DEFINE_UNQUOTED(GNU_PACKAGE, "$GNU_PACKAGE")

AM_MAINTAINER_MODE

dnl See if user has expressed a preference for use of curses and/or color
dnl These set variables $enable_color and $with_curses to "no" if disabled
dnl "yes" if enabled, or undefined if not specified

AC_ARG_WITH(curses,
 [  --with-curses       try to use curses for colored debugging output (default)
  --without-curses    do not use curses for colored debugging output])

AC_ARG_ENABLE(color,
 [  --enable-color        use curses or ansi escape sequences for colored debug output
  --disable-color       do not try to generated colored debug output])


dnl and look to see if they want to disable the grid optimisation

AC_ARG_ENABLE(grid-opt,
 [  --enable-grid-opt           enable the grid optimsation within the pattern matcher (default)
  --enable-grid-opt=distrust  enable the grid optimsation in non-trusting mode
  --disable-grid-opt          disable the grid optimisation])


dnl or the hashing code

AC_ARG_ENABLE(hashing,
 [  --enable-hashing            enable hashing (default)
  --disable-hashing           disable the hashing code])


AC_PROG_CC
AC_EXEEXT

if test $ac_cv_mingw32 = yes;then
    LIBS="$LIBS -lwsock32"
fi

AC_PROG_CPP
AC_PROG_GCC_TRADITIONAL
AC_PROG_RANLIB

dnl required since we use SUBDIRS in Makefile.am
AC_PROG_MAKE_SET

AC_HEADER_MAJOR

AC_C_CONST

AC_CHECK_HEADERS(unistd.h string.h sys/time.h)

#results of strsep and setlinebuf test used in interface/play_ascii.c
#random and alarm not available in VC
#snprintf not universally available
AC_CHECK_FUNCS(setlinebuf random alarm snprintf gettimeofday)

dnl if snprintf not available use g_snprintf from glib
if test $ac_cv_func_snprintf = no; then
    AC_CHECK_PROG(glibconfig,glib-config,yes,no)
    if test $ac_cv_prog_glibconfig = yes;then
	glibprefix=`glib-config --prefix`
	CPPFLAGS="$CPPFLAGS -I$glibprefix/include -I$glibprefix/lib/glib/include"
	LDFLAGS="$LDFLAGS -L$glibprefix/lib"
    	AC_CHECK_LIB(glib,g_snprintf,,
    	   AC_MSG_ERROR([glib installation problem])
        )
    else
    	   AC_MSG_WARN([Neither snprintf nor glib found. Gnugo is
	   compiled but it is safer to get glib at
	   http://www.gtk.org/])
    fi
fi
 
dnl AM_FUNC_ERROR_AT_LINE

AC_MSG_CHECKING([for __FUNCTION__])
AC_TRY_COMPILE(,[char *s=__FUNCTION__],
[ AC_DEFINE(HAVE___FUNCTION__)
  AC_MSG_RESULT(yes)],AC_MSG_RESULT(no))

dnl -------- color debugging support -----------

dnl replace occurrences of @gp_tcap@ in Makefile.in
AC_SUBST(gp_tcap)
gp_tcap=''

dnl curses detection - derived from gnuplot's configure.in
if test "$with_curses" != no -a "$enable_color" != no ; then

  AC_MSG_CHECKING(for color support)

  dnl first, make sure that both curses.h and term.h are available
  dnl FIXME : better to actually figure out here what headers are really required

  AC_CHECK_HEADER( curses.h,[
   AC_CHECK_HEADER( term.h,[

    dnl so far so good - now check for the library

    dnl check for terminal library
    dnl this is a very cool solution from octave's configure.in
    for termlib in ncurses curses termcap terminfo termlib; do
      AC_CHECK_LIB(${termlib}, tputs, [gp_tcap="${gp_tcap} -l${termlib}"])
      case "${gp_tcap}" in
        *-l${termlib}*)
          AC_MSG_RESULT([using ${gp_tcap} for curses])
	  LIBS="$LIBS ${gp_tcap}"
          AC_DEFINE(CURSES)
          break
        ;;
      esac
    done
  fi
 ])
])

if test "$enable_color" = yes -a "$gp_tcap" = '' ; then
  dnl we asked for color, but there is no curses
  AC_DEFINE(ANSI_COLOR)
fi


dnl ---------- grid optimisation --------

if test "$enable_grid_opt" = "distrust" ; then
  AC_DEFINE(GRID_OPT, 2)
else
  if test "$enable_grid_opt" = "no" ; then
    AC_DEFINE(GRID_OPT, 0)
  else
    AC_DEFINE(GRID_OPT, 1)
  fi
fi


dnl --------- hashing ---------

if test "$enable_hashing" = "no" ; then
  AC_DEFINE(HASHING, 0)
else
  AC_DEFINE(HASHING, 1)
fi




dnl  ----------- special-case use of gcc ---------

dnl Not sure if we are supposed to be accessing this variable, but...

AC_SUBST(GCC_ONLY)
AC_SUBST(GNUGO_SOME_WARNINGS)
AC_SUBST(GNUGO_ALL_WARNINGS)
AC_SUBST(NO_WARNINGS)

dnl Please add -Wp,-lang-c89 to SOME_WARNINGS soon

NO_WARNINGS="CFLAGS=$CFLAGS"
if test $ac_cv_prog_gcc = yes; then
  GCC_ONLY=''
  GGO_SOME_WARNINGS='-Wall -W -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wp,-lang-c89'
  GGO_ALL_WARNINGS='-Wall -W -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wp,-lang-c89'
  GNUGO_SOME_WARNINGS="CFLAGS=$CFLAGS $GGO_SOME_WARNINGS"
  GNUGO_ALL_WARNINGS="CFLAGS=$CFLAGS $GGO_ALL_WARNINGS"
  CFLAGS="$CFLAGS $GGO_SOME_WARNINGS"
else
  GCC_ONLY='#'
  GNUGO_SOME_WARNINGS=''
  GNUGO_ALL_WARNINGS=''
fi

dnl Now lines in Makefile.am can be prefixed @GCC_ONLY@, and
dnl we can specify either @GNUGO_SOME_WARNINGS@ or @GNUGO_ALL_WARNINGS@

dnl FIXME : please add warnings for other compilers !



#AM_GNU_GETTEXT
#AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)

AC_OUTPUT([Makefile interface/Makefile patterns/Makefile sgf/Makefile utils/Makefile engine/Makefile doc/Makefile config.vc:config.vcin])

